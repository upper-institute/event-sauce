// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getLastEvent = `-- name: GetLastEvent :one
SELECT partition_key, sorting_key, event_payload FROM events
WHERE partition_key = $1 ORDER BY sorting_key DESC LIMIT 1
`

func (q *Queries) GetLastEvent(ctx context.Context, partitionKey uuid.UUID) (Event, error) {
	row := q.db.QueryRowContext(ctx, getLastEvent, partitionKey)
	var i Event
	err := row.Scan(&i.PartitionKey, &i.SortingKey, &i.EventPayload)
	return i, err
}

const insertEventSequence = `-- name: InsertEventSequence :exec
WITH sk(sorting_key) AS (
  SELECT
    CASE WHEN max(events.sorting_key)+1 = $2
      THEN $2
      ELSE NULL
    END
  FROM events
  WHERE events.partition_key = $1
)
INSERT INTO events (
  partition_key, sorting_key, event_payload
) VALUES (
  $1, sk.sorting_key, $3
)
`

type InsertEventSequenceParams struct {
	PartitionKey uuid.UUID
	SortingKey   int64
	EventPayload []byte
}

func (q *Queries) InsertEventSequence(ctx context.Context, arg InsertEventSequenceParams) error {
	_, err := q.db.ExecContext(ctx, insertEventSequence, arg.PartitionKey, arg.SortingKey, arg.EventPayload)
	return err
}

const rangeEvents = `-- name: RangeEvents :many
SELECT sorting_key, event_payload FROM events
WHERE partition_key = $1 AND sorting_key >= $3::bigint
ORDER BY sorting_key ASC LIMIT $2
`

type RangeEventsParams struct {
	PartitionKey    uuid.UUID
	Limit           int32
	StartSortingKey int64
}

type RangeEventsRow struct {
	SortingKey   int64
	EventPayload []byte
}

func (q *Queries) RangeEvents(ctx context.Context, arg RangeEventsParams) ([]RangeEventsRow, error) {
	rows, err := q.db.QueryContext(ctx, rangeEvents, arg.PartitionKey, arg.Limit, arg.StartSortingKey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RangeEventsRow
	for rows.Next() {
		var i RangeEventsRow
		if err := rows.Scan(&i.SortingKey, &i.EventPayload); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rangeEventsWithStop = `-- name: RangeEventsWithStop :many
SELECT sorting_key, event_payload FROM events
WHERE partition_key = $1 AND sorting_key BETWEEN $3::bigint AND $4::bigint
ORDER BY sorting_key ASC LIMIT $2
`

type RangeEventsWithStopParams struct {
	PartitionKey    uuid.UUID
	Limit           int32
	StartSortingKey int64
	StopSortingKey  int64
}

type RangeEventsWithStopRow struct {
	SortingKey   int64
	EventPayload []byte
}

func (q *Queries) RangeEventsWithStop(ctx context.Context, arg RangeEventsWithStopParams) ([]RangeEventsWithStopRow, error) {
	rows, err := q.db.QueryContext(ctx, rangeEventsWithStop,
		arg.PartitionKey,
		arg.Limit,
		arg.StartSortingKey,
		arg.StopSortingKey,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RangeEventsWithStopRow
	for rows.Next() {
		var i RangeEventsWithStopRow
		if err := rows.Scan(&i.SortingKey, &i.EventPayload); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertEvent = `-- name: UpsertEvent :exec
INSERT INTO events (
  partition_key, sorting_key, event_payload
) VALUES (
  $1, $2, $3
) ON CONFLICT (partition_key, sorting_key)
  DO UPDATE SET event_payload = $3
`

type UpsertEventParams struct {
	PartitionKey uuid.UUID
	SortingKey   int64
	EventPayload []byte
}

func (q *Queries) UpsertEvent(ctx context.Context, arg UpsertEventParams) error {
	_, err := q.db.ExecContext(ctx, upsertEvent, arg.PartitionKey, arg.SortingKey, arg.EventPayload)
	return err
}
