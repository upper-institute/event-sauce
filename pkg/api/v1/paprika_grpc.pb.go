// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: v1/paprika.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaprikaServiceClient is the client API for PaprikaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaprikaServiceClient interface {
	Set(ctx context.Context, in *Snapshot, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Get(ctx context.Context, in *Snapshot_GetRequest, opts ...grpc.CallOption) (*Snapshot, error)
}

type paprikaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaprikaServiceClient(cc grpc.ClientConnInterface) PaprikaServiceClient {
	return &paprikaServiceClient{cc}
}

func (c *paprikaServiceClient) Set(ctx context.Context, in *Snapshot, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/eventsauce.api.v1.PaprikaService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paprikaServiceClient) Get(ctx context.Context, in *Snapshot_GetRequest, opts ...grpc.CallOption) (*Snapshot, error) {
	out := new(Snapshot)
	err := c.cc.Invoke(ctx, "/eventsauce.api.v1.PaprikaService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaprikaServiceServer is the server API for PaprikaService service.
// All implementations must embed UnimplementedPaprikaServiceServer
// for forward compatibility
type PaprikaServiceServer interface {
	Set(context.Context, *Snapshot) (*emptypb.Empty, error)
	Get(context.Context, *Snapshot_GetRequest) (*Snapshot, error)
	mustEmbedUnimplementedPaprikaServiceServer()
}

// UnimplementedPaprikaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaprikaServiceServer struct {
}

func (UnimplementedPaprikaServiceServer) Set(context.Context, *Snapshot) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedPaprikaServiceServer) Get(context.Context, *Snapshot_GetRequest) (*Snapshot, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedPaprikaServiceServer) mustEmbedUnimplementedPaprikaServiceServer() {}

// UnsafePaprikaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaprikaServiceServer will
// result in compilation errors.
type UnsafePaprikaServiceServer interface {
	mustEmbedUnimplementedPaprikaServiceServer()
}

func RegisterPaprikaServiceServer(s grpc.ServiceRegistrar, srv PaprikaServiceServer) {
	s.RegisterService(&PaprikaService_ServiceDesc, srv)
}

func _PaprikaService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Snapshot)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaprikaServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventsauce.api.v1.PaprikaService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaprikaServiceServer).Set(ctx, req.(*Snapshot))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaprikaService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Snapshot_GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaprikaServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eventsauce.api.v1.PaprikaService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaprikaServiceServer).Get(ctx, req.(*Snapshot_GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaprikaService_ServiceDesc is the grpc.ServiceDesc for PaprikaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaprikaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "eventsauce.api.v1.PaprikaService",
	HandlerType: (*PaprikaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _PaprikaService_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _PaprikaService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/paprika.proto",
}
