// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/v1/eventbus.proto

package flipbookv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventBusClient is the client API for EventBus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventBusClient interface {
	Open(ctx context.Context, in *Subscription_OpenRequest, opts ...grpc.CallOption) (*Subscription, error)
	Close(ctx context.Context, in *Subscription_CloseRequest, opts ...grpc.CallOption) (*Subscription, error)
}

type eventBusClient struct {
	cc grpc.ClientConnInterface
}

func NewEventBusClient(cc grpc.ClientConnInterface) EventBusClient {
	return &eventBusClient{cc}
}

func (c *eventBusClient) Open(ctx context.Context, in *Subscription_OpenRequest, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/flipbook.v1.EventBus/Open", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventBusClient) Close(ctx context.Context, in *Subscription_CloseRequest, opts ...grpc.CallOption) (*Subscription, error) {
	out := new(Subscription)
	err := c.cc.Invoke(ctx, "/flipbook.v1.EventBus/Close", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventBusServer is the server API for EventBus service.
// All implementations must embed UnimplementedEventBusServer
// for forward compatibility
type EventBusServer interface {
	Open(context.Context, *Subscription_OpenRequest) (*Subscription, error)
	Close(context.Context, *Subscription_CloseRequest) (*Subscription, error)
	mustEmbedUnimplementedEventBusServer()
}

// UnimplementedEventBusServer must be embedded to have forward compatible implementations.
type UnimplementedEventBusServer struct {
}

func (UnimplementedEventBusServer) Open(context.Context, *Subscription_OpenRequest) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Open not implemented")
}
func (UnimplementedEventBusServer) Close(context.Context, *Subscription_CloseRequest) (*Subscription, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Close not implemented")
}
func (UnimplementedEventBusServer) mustEmbedUnimplementedEventBusServer() {}

// UnsafeEventBusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventBusServer will
// result in compilation errors.
type UnsafeEventBusServer interface {
	mustEmbedUnimplementedEventBusServer()
}

func RegisterEventBusServer(s grpc.ServiceRegistrar, srv EventBusServer) {
	s.RegisterService(&EventBus_ServiceDesc, srv)
}

func _EventBus_Open_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription_OpenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).Open(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flipbook.v1.EventBus/Open",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).Open(ctx, req.(*Subscription_OpenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventBus_Close_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Subscription_CloseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventBusServer).Close(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/flipbook.v1.EventBus/Close",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventBusServer).Close(ctx, req.(*Subscription_CloseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EventBus_ServiceDesc is the grpc.ServiceDesc for EventBus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventBus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flipbook.v1.EventBus",
	HandlerType: (*EventBusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Open",
			Handler:    _EventBus_Open_Handler,
		},
		{
			MethodName: "Close",
			Handler:    _EventBus_Close_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/v1/eventbus.proto",
}
